package com.bluemobi.cnpc.fragment;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.Response;
import com.bluemobi.cnpc.R;
import com.bluemobi.cnpc.activity.HomeActivity;
import com.bluemobi.cnpc.activity.LoginActivity;
import com.bluemobi.cnpc.activity.OilInActivity;
import com.bluemobi.cnpc.activity.PayActivity;
import com.bluemobi.cnpc.activity.PayPreferentialActivity;
import com.bluemobi.cnpc.activity.ProductSelectionActivity;
import com.bluemobi.cnpc.annotation.ContentView;
import com.bluemobi.cnpc.annotation.PageName;
import com.bluemobi.cnpc.app.CnpcApplication;
import com.bluemobi.cnpc.base.BaseActivity;
import com.bluemobi.cnpc.base.utils.Logger;
import com.bluemobi.cnpc.callback.LocationCallBack;
import com.bluemobi.cnpc.db.entity.AllCity;
import com.bluemobi.cnpc.db.entity.CityListDetail;
import com.bluemobi.cnpc.network.request.HomeRequest;
import com.bluemobi.cnpc.network.request.OilWalletRequest;
import com.bluemobi.cnpc.network.response.HomeResponse;
import com.bluemobi.cnpc.network.response.OilWalletResponse;
import com.bluemobi.cnpc.util.Constants;
import com.bluemobi.cnpc.util.PreferencesService;
import com.bluemobi.cnpc.util.SharedPreferencesUtil;
import com.bluemobi.cnpc.util.StringUtils;
import com.bluemobi.cnpc.util.Utils;
import com.bluemobi.cnpc.util.WebUtils;
import com.bluemobi.cnpc.view.AutoScrollViewPager;
import com.bluemobi.cnpc.view.CustomSpinnerBase;
import com.bluemobi.cnpc.view.CustomSpinnerOptionHome;
import com.bluemobi.cnpc.view.LoadingPage;
import com.bluemobi.cnpc.view.Marqueen;
import com.bluemobi.cnpc.view.SwitchDotView;
import com.bumptech.glide.Glide;

import org.litepal.crud.DataSupport;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import butterknife.Bind;
import butterknife.ButterKnife;
import de.greenrobot.event.EventBus;

/**
 * Created by gaoyn on 2015/7/20.
 * <p/>
 * p3-首页
 */

@ContentView(R.layout.fragment_home_page)
@PageName(R.string.home_page)
public class HomePageFragment extends BaseFragment implements View.OnClickListener,LocationCallBack {

    @Bind(R.id.preferential)
    Button preferential; //充值优惠

    @Bind(R.id.purchase)
    Button purchase; //油品预购

    @Bind(R.id.pay)
    Button pay;  //加油支付

    @Bind(R.id.oilcard_prepaid)
    Button oilcard_prepaid;  //油卡充值

    @Bind(R.id.auto_viewpaper)
    AutoScrollViewPager autoScrollViewPager;

    @Bind(R.id.swicth_dots)
    SwitchDotView switchDotView;

    protected
    @Bind(R.id.title)
    Marqueen title;

    @Bind(R.id.oil_model_type)
    CustomSpinnerOptionHome spinner_type;

    protected
    @Bind(R.id.tv_price)
    TextView tv_price;


    private  List<String> oilsList ;

    private Map<String, String> sunyardoils = new HashMap<String, String>();


    private List<ImageView> mViewList = new ArrayList<ImageView>();

    private ViewpagerAdapter mAdapter;

    private boolean mIsChangeCity = false;

    private AllCity city;

    public HomeResponse.HomeData data;

    public OilWalletResponse.OilWalletBean Bean;


    public HomePageFragment()
    {
        EventBus.getDefault().register(this);
    }

    public void onEventMainThread(int type)
    {

    }

    @Override
    public void initData(Bundle savedInstanceState) {

        city = ((HomeActivity) getActivity()).singleCity;
        String cityName =SharedPreferencesUtil.getFromFileByDefault(mContext, "cityName", Constants.DEFAULT_LATITUDE);
        String province= SharedPreferencesUtil.getFromFileByDefault(mContext, "province", Constants.DEFAULT_LONGITUDE);
        StringBuffer sb = new StringBuffer();
        sb.append(province);
        sb.append(cityName);

        //切换城市
        if (city != null)
        {
            String cityStr = city.getName();
            if(sb.indexOf(cityStr)>-1) //包含
            {
                mIsChangeCity = false;
            }
            else
            {
                mIsChangeCity = true;
            }
        }
        isShowLoadPage = false;
        connectToServerMain();
    }




    @Override
    protected void successViewCompleted(View successView) {

        ButterKnife.bind(this, successView);
        oilsList = new ArrayList<String>();

        ((HomeActivity) mContext).isPage = true;
        autoScrollViewPager.setInterval(2000);
        autoScrollViewPager.setCycle(true);
        autoScrollViewPager.startAutoScroll();

        autoScrollViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if (mViewList.size() == 1) {
                    return;
                }
                switchDotView.setCurrentIndex(position);
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });
        preferential.setOnClickListener(this);
        purchase.setOnClickListener(this);
        pay.setOnClickListener(this);
        oilcard_prepaid.setOnClickListener(this);
        spinner_type.setOnCustomClickListener(new CustomSpinnerBase.OnCustomSpinnerItemClickListener() {
            @Override
            public void onCustomSpinnerClick(int option) {
                String Name = spinner_type.getSpinnerText().toString().trim();
                if (StringUtils.isNotEmpty(Name))
                {
                    String str = sunyardoils.get(Name);
                    String[] split = str.split(";");
                    String deptId = split[0];
                    String customerPrice = split[1];
                    tv_price.setText(customerPrice + "元/升");
                }
            }
        });

    }

    @Override
    protected LoadingPage.LoadResult load() {
        return LoadingPage.LoadResult.success;
    }


    private boolean loginSucceed; //false

    @Override
    public void onClick(View v) {
        loginSucceed  = PreferencesService.getInstance(mContext).getPreferencesBool("loginSucceed"); //第一次false
        Logger.e("loginSucceed-->",loginSucceed);
        if (!loginSucceed) {
            Utils.moveTo(mContext, LoginActivity.class);
            ((BaseActivity) mContext).finishAll();
            return;
        }
        switch (v.getId()) {
            case R.id.preferential:

                Utils.moveTo(mContext, PayPreferentialActivity.class);
                break;
            case R.id.purchase:
                Utils.moveTo(mContext, ProductSelectionActivity.class);
                break;
            case R.id.pay:
                Utils.moveTo(mContext, PayActivity.class);
                break;
            case R.id.oilcard_prepaid:
                Request();
                break;
        }
    }

    private void Request() {
        OilWalletRequest request = new OilWalletRequest(new Response.Listener<OilWalletResponse>() {
            @Override
            public void onResponse(OilWalletResponse response) {
                Utils.closeDialog();
                if (response != null && response.getStatus() == 0) {// success
                    Bean = response.data;
                    Intent intent = new Intent();
                    intent.putExtra("balance",Bean.oilBalance);
                    intent.setClass(mContext, OilInActivity.class);
                    startActivity(intent);
                } else {// failed
                    Log.e("error", "error");
                }
            }
        }, (Response.ErrorListener) getActivity());
        request.setUserId(CnpcApplication.getInstance().getmData().userId);
        request.setType("1");
        WebUtils.doPost(request);
        Utils.showProgressDialog(mContext);
    }

    private boolean isOK = false;

    private boolean isGetDataFromServer = true;//首次 请求 定位请求成功后不再请求

    @Override
    public void locationSucceed(String cityName) {
        isOK = true;

        if (isGetDataFromServer)
        {
            connectToServerMain();

        }


    }

    class ViewpagerAdapter extends PagerAdapter {

        @Override
        public int getCount() {
            return mViewList == null ? 0 : mViewList.size();
        }

        public void destroyItem(View container, int position, Object object) {
            ImageView view = mViewList.get(position % mViewList.size());
            ((AutoScrollViewPager) container).removeView(view);
            view.setImageBitmap(null);
        }

        @Override
        public boolean isViewFromObject(View view, Object object) {
            return view == object;
        }

        @Override
        public Object instantiateItem(ViewGroup container, int position) {
//            return super.instantiateItem(container, position);
            container.addView(mViewList.get(position), 0);//添加页卡
            return mViewList.get(position);
        }

        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {
//            super.destroyItem(container, position, object);
            container.removeView(mViewList.get(position));
        }
    }

    public void connectToServerMain() {
        isGetDataFromServer = false;
        mIsChangeCity = ((HomeActivity) getActivity()).isChangeCity;
        city = ((HomeActivity) getActivity()).singleCity;
        if (!isOK)
        {
            Utils.showProgressDialog(mContext);
        }
        final String cityName = SharedPreferencesUtil.getFromFile(mContext, "cityName");
        List<CityListDetail> cityListDetails = DataSupport.select("sid", "divisionname").where("divisionname like ?", cityName + '%').find(CityListDetail.class);
        HomeRequest request = new HomeRequest
                (
                        new Response.Listener<HomeResponse>() {
                            @Override
                            public void onResponse(HomeResponse response) {
                                isGetDataFromServer = false;//定位请求成功后不再请求
                                Utils.closeDialog();
                                data = response.data;
                                ArrayList<String> imgs = data.imgs;
                                prePareImgs(imgs);
                                wrapData(data);
                            }

                        }, (Response.ErrorListener) getActivity());
        request.setHandleCustomErr(false);
        if (mIsChangeCity) {
            request.setAddressid(city.getAddressid());
        } else {
            String latitude =SharedPreferencesUtil.getFromFileByDefault(mContext, "latitude", Constants.DEFAULT_LATITUDE);
            String longitude= SharedPreferencesUtil.getFromFileByDefault(mContext, "longitude", Constants.DEFAULT_LONGITUDE);
            request.setLatitude(latitude);
            request.setLongitude(longitude);
            if (cityListDetails != null && cityListDetails.size() > 0) {
                request.setAddressid(cityListDetails.get(0).getSid() + "");
            } else {
                request.setAddressid(Constants.DEFAULTY_CITYCODE);
            }
        }
        WebUtils.doPost(request);
    }


    private void prePareImgs(ArrayList<String> imgs) {
        if (imgs != null) {
            mViewList.clear();
            for (int i = 0; i < imgs.size(); i++) {

                ImageView imageView = new ImageView(mContext);
                imageView.setScaleType(ImageView.ScaleType.FIT_XY);
                mViewList.add(imageView);
                Glide.with(mContext).load(imgs.get(i).toString())
                        //.placeholder(R.drawable.default)/默认图片
                        .override(Utils.getDeviceWidth(getActivity()),
                                (int) (Utils.getDeviceWidth(getActivity()) / 2.5))
                        .into(imageView);
            }
            mAdapter = new ViewpagerAdapter();
            autoScrollViewPager.setAdapter(mAdapter);
            switchDotView.generateDots(mViewList.size());
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    private void wrapData(HomeResponse.HomeData data) {

        if (data == null) {
            return;
        }

        String deptName = data.deptName;
        if (StringUtils.isNotEmpty(deptName)) {
            title.setText(deptName);
        }

        ArrayList<HomeResponse.OilInfo> oilInfos = data.oilInfos;
        if (oilInfos == null || oilInfos.size() == 0) {

            spinner_type.setSpinnerText("---");
            spinner_type.setEnabled(false);
            oilsList.clear();
            tv_price.setText("---" + "元/升");
        } else
        {
            oilsList.clear();
            for (HomeResponse.OilInfo dto : oilInfos) {
                sunyardoils.put(dto.productName, dto.id + ";" + dto.customerPrice);
                oilsList.add( dto.productName);
            }
            spinner_type.setEnabled(true);
            spinner_type.setDatas(oilsList);
            spinner_type.setDefaultText();
            spinner_type.setSpinnerTextSize(14);
            String Name = spinner_type.getSpinnerText().toString().trim();
            if (StringUtils.isNotEmpty(Name))
            {
                String str = sunyardoils.get(Name);
                String[] split = str.split(";");
                String deptId = split[0];
                String customerPrice = split[1];
                tv_price.setText(customerPrice + "元/升");
            }

        }
    }


}
